그리디(Greedy) 알고리즘이란 당장 최적인 답을 도출하자는 모토를 가진 알고리즘 설계 기법이다. 근데 그리디 알고리즘은 전체에서 최적값을 언제나 구할 수는 없음. 그럼에도 그리디 알고리즘은 속도가 매우빨라서
자주 사용될 수 있음. 하지만 항상 최적해가 되지 않으므로 2가지 조건을 만족해야 함.
 1. 탐욕 선택 속성(Greedy Choice Property)
 2. 최적 부분 구조(Optimal Substructrue)
1은 이전의 선택이 이후에 영향을 주지 않음을 의미, 2는 부분 문제의 최적결과가 전체에도 그대로 적용될 수 있어야 함.
일반적으로 그리디임을 증명하려면 수학적 증명이 동반 되어야 함.

 ** 예시
 - Action Selection문제(활동 선택)
 
 * N개의 활동이 있고 각 활동에는 시작 시간 및 종료 시간이 있을 때, 한 사람이 최대한 많이 할 수 있는 활동의 수를 구하는 문제
 
 활동이름     A     B     C     D     E     F
 시작시간     7     5     3     1     6     10
 종료시간     8     7     6     2     9     11
 
 이 문제는 최대한 많은 활동을 해야 하므로 언제 시작하든 전체에서 가장 종료 시간이 빠른 것부터 선택해야 함. 어차피 시작 시간은 종료 시간 이전이므로 고려하지 않음.
 따라서, 종료 시간을 기준으로 정렬한 뒤, 제일 먼저 끝나는 활동을 무조건 선택하고 끝났을 때, 바로 다음에 선택할 수 있는 활동을 찾아 수행하는 방식을 반복하여 해결
 
  - 거스름돈 문제 (MSD를 이용) * MSD : 가장 중요한 단위를 먼저 계산하는 것
  2730원 어치의 물건을 사고 5000원을 냈다면 거스름돈은 2270원 이 때, 지폐와 동전 종류가 아래와 같을 때, 최소의 개수로 거스름돈을 주는 경우는?
   > 지폐 및 동전의 종류 : 1000원, 500원, 100원, 50원, 10원
   > 정답 : 1000원2개 100원 2개 50원 1개 10원 2개로 총 7개
   
   현재 상태에서 최선의 결과를 선택하여 전체에서 최적의 결과를 낼 수 있음.
